# tech: globals, logit_score, align(leave=), lag
# model: education_level, ineducation, retire, inwork
globals:
    periodic:
        - WEMRA: float

entities:
    household:
        fields:
            # period and id are implicit
            - nb_persons:  {type: int, initialdata: false}
            - nb_children: {type: int, initialdata: false}
            - region_id:   {type: int, initialdata: false}

        links:
            persons: {type: one2many, target: person, field: hh_id}

        processes:
            init_region_id:
                - region_id: choice([0, 1, 2, 3], [0.1, 0.2, 0.3, 0.4])

            household_composition:
                - nb_persons: countlink(persons)
                - nb_children: countlink(persons, age < 18)

            clean_empty: remove(nb_persons == 0)

    person:
        fields:
            # period and id are implicit
            - age:        int
            - gender:     bool
            # 1: in work, 2: unemployed including old-age unemployed,
            # 3: in education, 4: retired, 5: other inactive
            - workstate:  int
            # 1: single, 2: married, 3: divorced, 4: widowed
            - civilstate: int
            - dur_in_couple: int

            # link fields
            - mother_id:  int
            - partner_id: int
            - hh_id:      int

            # fields not present in input
            - agegroup_work: {type: int, initialdata: false}
            - agegroup_civilstate: {type: int, initialdata: false}
            - education_level: {type: int, initialdata: false}
            - inwork: {type: bool, initialdata: false}

        links:
            mother: {type: many2one, target: person, field: mother_id}
            partner: {type: many2one, target: person, field: partner_id}
            household: {type: many2one, target: household, field: hh_id}
            children: {type: one2many, target: person, field: mother_id}

        macros:
            MALE: True
            FEMALE: False
            ISMALE: gender
            ISFEMALE: not gender

            UNSET: -1

            SINGLE: 1
            MARRIED: 2
            DIVORCED: 3
            WIDOW: 4
            ISSINGLE: civilstate == 1
            ISMARRIED: civilstate == 2
            ISDIVORCED: civilstate == 3
            ISWIDOW: civilstate == 4

            INWORK: 1
            UNEMPLOYED: 2
            STUDENT: 3
            RETIRED: 4
            ISINWORK: workstate == 1
            ISUNEMPLOYED: workstate == 2
            ISSTUDENT: workstate == 3
            ISRETIRED: workstate == 4

        # possible transitions and regressions. The actual list used in the
        # simulation must be defined below
        processes:
            ageing:
                - age: age + 1
                - agegroup_civilstate: if(age < 50,
                                          5 * trunc(age / 5),
                                          10 * trunc(age / 10))
                - agegroup_work: if(age < 70, 5 * trunc(age / 5), 70)

            death:
                - dead: if(ISMALE,
                           logit_regr(0.0, align='al_p_dead_m.csv'),
                           logit_regr(0.0, align='al_p_dead_f.csv'))
                - civilstate: if(partner.dead, WIDOW, civilstate)
                - partner_id: if(partner.dead, UNSET, partner_id)
                - show('Avg age of dead men', grpavg(age, filter=dead and ISMALE))
                - show('Avg age of dead women', grpavg(age, filter=dead and ISFEMALE))
                - show('Widows', grpsum(ISWIDOW))
                - remove(dead)

            birth:
                - to_give_birth: logit_regr(0.0,
                                            filter=ISFEMALE and (age >= 15) and (age <= 50),
                                            align='al_p_birth.csv')
                - newbirth: new('person', filter=to_give_birth,
                                mother_id = id,
                                hh_id = hh_id,
                                age = 0,
                                partner_id = UNSET,
                                civilstate = SINGLE,
                                education_level = UNSET,
                                workstate = STUDENT,
                                gender = choice([MALE, FEMALE], [0.51, 0.49]))

            marriage:
                - in_couple: ISMARRIED
                - to_couple: if((age >= 18) and (age <= 90) and not in_couple,
                                if(ISMALE,
                                   logit_regr(0.0, align='al_p_mmkt_m.csv'),
                                   logit_regr(0.0, align='al_p_mmkt_f.csv')),
                                False)
                - difficult_match: if(to_couple and ISFEMALE,
                                      abs(age - grpavg(age, filter=to_couple and ISMALE)),
                                      nan)
                - inwork: ISINWORK
                - partner_id: if(to_couple,
                                 matching(set1filter=ISFEMALE, set2filter=ISMALE,
                                          score='- 0.4893 * other.age
                                                 + 0.0131 * other.age ** 2
                                                 - 0.0001 * other.age ** 3
                                                 + 0.0467 * (other.age - age)
                                                 - 0.0189 * (other.age - age) ** 2
                                                 + 0.0003 * (other.age - age) ** 3
                                                 - 0.9087 * (other.inwork and not inwork)
                                                 - 1.3286 * (not other.inwork and inwork)
                                                 - 0.6549 * (other.inwork and inwork)
                                                 - 0.7939 * ((other.education_level == 3) and (education_level == 4))
                                                 - 1.4128 * ((other.education_level == 2) and (education_level == 4))
                                                 - 0.8984 * ((other.education_level == 4) and (education_level == 3))
                                                 - 1.5530 * ((other.education_level == 4) and (education_level == 2))
                                                 - 0.5451 * ((other.education_level == 2) and (education_level == 2))',
                                          orderby=difficult_match),
                                 partner_id)
                - justcoupled: to_couple and (partner_id != UNSET)
                - newhousehold: new('household', filter=justcoupled and ISFEMALE,
                                    region_id=choice([0, 1, 2, 3], [0.1, 0.2, 0.3, 0.4]))

                - hh_id: if(justcoupled,
                            if(ISMALE, partner.newhousehold, newhousehold),
                            hh_id)

                - civilstate: if(justcoupled, MARRIED, civilstate)
                - dur_in_couple: if(justcoupled,
                                    0,
                                    if(in_couple, dur_in_couple + 1, 0))

            get_a_life:
                - alone: household.nb_persons == 1
                - hh_id: if(not(ISMARRIED) and not alone and (age >= 24),
                            new('household',
                                region_id=choice([0, 1, 2, 3], [0.1, 0.2, 0.3, 0.4])),
                            hh_id)

            divorce:
                - agediff: if(ISFEMALE and ISMARRIED, age - partner.age, 0)
                - inwork: ISINWORK
                # select females to divorce
                - divorce: logit_regr(0.6713593 * household.nb_children
                                      - 0.0785202 * dur_in_couple
                                      + 0.1429621 * agediff - 0.0088308 * agediff **2
                                      - 0.814204 * (ISINWORK and partner.get(ISINWORK))
                                      - 4.546278,
                                      filter = ISFEMALE and ISMARRIED and (dur_in_couple > 0),
                                      align = 'al_p_divorce.csv')
                # break link to partner
                - to_divorce: divorce or partner.divorce
                - partner_id: if(to_divorce, UNSET, partner_id)

                - civilstate: if(to_divorce, DIVORCED, civilstate)
                - dur_in_couple: if(to_divorce, 0, dur_in_couple)
                # move out males
                - hh_id: if(ISMALE and to_divorce,
                            new('household',
                                region_id=household.region_id),
                            hh_id)

            education_level:
                - education_level: if(education_level < 0,
                                      choice([2, 3, 4], [0.25, 0.39, 0.36]),
                                      education_level)

            ineducation:
                # unemployed if left education
                - workstate: if(ISSTUDENT and
                                   (((age == 16) and (education_level == 2)) or
                                    ((age == 19) and (education_level == 3)) or
                                    ((age == 24) and (education_level == 4))),
                                UNEMPLOYED,
                                workstate)
                - show('num students', grpsum(ISSTUDENT))

            workstate_changes: show(groupby(workstate, lag(workstate)))

            retire:
                - workstate: if(ISMALE,
                                if((age >= 65), RETIRED, workstate),
                                if((age >= WEMRA), RETIRED, workstate))

            inwork:
                - work_score: UNSET
                # men
                - work_score: if(ISMALE and (age > 14) and (age < 65) and ISINWORK,
                                 logit_score(-0.196599 * age + 0.0086552 * age **2 - 0.000988 * age **3
                                             + 0.1892796 * ISMARRIED + 3.554612),
                                 work_score)
                - work_score: if(ISMALE and (age > 14) and (age < 50) and ISUNEMPLOYED,
                                 logit_score(0.9780908 * age - 0.0261765 * age **2 + 0.000199 * age **3
                                             - 12.39108),
                                 work_score)
                # women
                - work_score: if(ISFEMALE and (age > 14) and (age < 65) and ISINWORK,
                                 logit_score(-0.2740483 * age + 0.0109883 * age **2 - 0.0001159 * age **3
                                             - 0.0906834 * ISMARRIED + 3.648706),
                                 work_score)
                - work_score: if(ISFEMALE and (age > 14) and (age < 50) and ISUNEMPLOYED,
                                 logit_score(0.8217638 * age - 0.0219761 * age **2 + 0.000166 * age **3
                                             - 0.5590975 * ISMARRIED - 10.48043),
                                 work_score)
                - work: if((age > 15) and (age < 65),
                           if(ISMALE,
                              align(work_score,
                                    leave=ISRETIRED,
                                    fname='al_p_inwork_m.csv'),
                              align(work_score,
                                    leave=ISRETIRED,
                                    fname='al_p_inwork_f.csv')),
                           False)
                - workstate: if(work, INWORK, workstate)
                # if not selected to work and last period in work set workstate to unemployed
                - workstate: if(not work and lag(ISINWORK), UNEMPLOYED, workstate)
                # retire
                - workstate: if(ISMALE,
                                if((age >= 65), RETIRED, workstate),
                                if((age >= WEMRA), RETIRED, workstate))

                - show('have job', grpsum(work), 
                       '(kept:', grpsum(work and lag(ISINWORK)),
                       '/ new:', grpsum(work and not lag(ISINWORK)), ')')
#                - csv(dump(id, agegroup_work, education_level,
#                           work_score, workstate, lag(workstate)))

            dump_csv_p: csv(dump())

simulation:
    init:
        - household: [init_region_id]
        - person: [ineducation]
        - household: [household_composition, clean_empty]

    processes:
        - household: [household_composition, clean_empty]
        - person: [
            ageing,
            death,
            birth,
            retire,
            education_level,
            ineducation,
            marriage,
            get_a_life,
        ]
        - household: [household_composition]
        - person: [divorce]
        - household: [household_composition]
        - person: [
            inwork,
            workstate_changes,
#            dump_csv_p
        ]

    input:
        file: simple2001.h5
    output:
        file: simulation.h5

    # first simulated period
    start_period: 2002
    periods: 2
