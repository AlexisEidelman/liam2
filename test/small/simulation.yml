globals:
    periodic:
        - MINR: float

entities:
    household:
        fields:
            # period and id are implicit
            - num_persons:  {type: int, initialdata: False}
            - nch:          {type: int, initialdata: False}
            - start_period: {type: int, initialdata: False}
           
        links:
            persons: {type: one2many, target: person, field: hh_id}

        processes:
            num_persons: countlink(persons)
            nch: countlink(persons, age <= 18)
            maxnch: grpmax(nch)
            dump_csv_h: csv(dump())

    person:
        fields:
            # period and id are implicit
            - age:          int
            - dead:         bool
            - gender:       bool
            - work:         bool
            
            - partner_id:   int            
            - hh_id:        int
            - f_id:         int
            - m_id:         int
            
            - v1:           {type: float, initialdata: False}
            - nch:          {type: int, initialdata: False}
            - eduach:       {type: int, initialdata: False}
            - m_age:        {type: int, initialdata: False}
            - agegroup:     {type: int, initialdata: False}
            - ch_minage:    {type: int, initialdata: False}
            - ch_maxage:    {type: int, initialdata: False}
            - young_mother: {type: bool, initialdata: False}

        links:
            partner: {type: many2one, target: person, field: partner_id}
            household: {type: many2one, target: household, field: hh_id}
            father: {type: many2one, target: person, field: f_id}
            mother: {type: many2one, target: person, field: m_id}
            children: {type: one2many, target: person, field: m_id}

        macros:
            ISCHILD: age < 18
            
#            BOY: ISCHILD and MALE
#            GIRL: ISCHILD and FEMALE
            
            MALE: gender
            FEMALE: not gender

        # possible transitions & regressions. The actual list used in the
        # simulation must be defined below
        processes:
            bp: breakpoint(2002)
            
            test_init:
                - eduach: choice([2, 3, 4], [0.40, 0.35, 0.25])
            
            temp_global: age + 10
            temp_global_test1:
                - temp_global: temp_global * 2
            temp_global_test2:
                - temp_global: temp_global - 10
            show_temp_global: show(temp_global)
                
            test_expr:
                - show("count:", grpcount())
                - show("age:", age)
                - show("age + 1:", age + 1)
                - show("age / 10:", age / 10)
                - show("100 / age:", 100 / age)
                - show("age * (1 / 2):", age * (1 / 2))
                - show("clip(age, 10, 50)", clip(age, 10, 50)) 
            
            test_globals:
                - no_index: MINR
                - const_index: MINR[2005]
                - expr_index: MINR[period - 1]
                - show("implicit current period:", no_index, 
                       "/ in 2005:", const_index, 
                       "/ previous period:", expr_index)
                - globals_in_expr: 1.0 + MINR
                - idx_globals_in_expr: 1.0 + MINR[2002]
                - expr_idx_globals_in_expr: 1.0 + MINR[period - 1]
                - yob: randint(1900, period)
                - yop: yob + 65
                - vector_idx_globals_in_expr: 1.0 + MINR[yob + 65]
                - show("yob", yob, "yop", yop, "v", vector_idx_globals_in_expr) 

            test_macro:
                - ischild: age < 18
                - test_nonmacro1: show(grpsum(ischild))
                - test_macro1: show(grpsum(ISCHILD))
#                - breakpoint(2002)
            
                - age: age + 1
            
                - test_nonmacro2: show(grpsum(ischild))
                - show("test grpsum:", grpsum(ischild))
                - test_macro2: show(grpsum(ISCHILD))
            
            agegroup: if(age < 50, 5 * trunc(age / 5), 10 * trunc(age / 10))

            test_align:
                - dead: if(gender, 
                           align(logit_score(0.0), 
                                 take=age > 95, leave=ISCHILD,
                                 fname='al_p_dead_m.csv'),
                           align(logit_score(0.0),
                                 take=age > 95, leave=ISCHILD,
                                 fname='al_p_dead_f.csv'))
                                 
                - show('95+ not dead:', grpsum(not dead and (age > 95)),
                       'ISCHILD dead:', grpsum(dead and ISCHILD))
                       
                # align using temporary variable
                - temp: age + 1
                # this is not exactly the same number because of the way we 
                # correct for "fractional persons" with a probability of adding
                # one person. However the difference should be < than the number
                # of alignment categories.
                - var_aligned: align(0.0, fname='al_p_dead_m.csv')
                - temp_aligned: align(0.0, fname='al_p_temp.csv')
                - expr_aligned: align(0.0, fname='al_p_expr.csv')
                - show('temp != var:',
                       grpcount(temp_aligned != var_aligned) > 105)
                - show('var != temp:',
                       grpcount(expr_aligned != var_aligned) > 105)

            test_logit: 
                - simple: logit_regr(0.0)
                
            test_log_regr:
                - v1: "42"
                - v1: log_regr(2.484557 + 0.2283921 * age - 0.0026106 * age **2,
                               filter=MALE)
                - v2: if(MALE,
                         log_regr(2.484557 + 0.2283921 * age - 0.0026106 * age **2),
                         42)
                - v3: if(MALE, 
                         exp(2.484557 + 0.2283921 * age - 0.0026106 * age **2),
                         42)
                - show('v1', v1, '\n',
                       'num values:', grpcount(v1 != 42), '\n',
                       'num problems:', grpcount((v1 != v2) or (v2 != v3)))
                
                - err: normal()
                       
                - v4: "if(MALE,
                          log_regr(2.484557 + 0.2283921 * age, error_var='err'),
                          0)"
                - v5: "if(MALE,
                          exp(2.484557 + 0.2283921 * age + err),
                          0)"
                - show('v4', v4, '\n', 'v5', v5, '\n',
                       'num values:', grpcount(v4 > 0), '\n',
                       'num problems:', grpcount(v4 != v5))

                - v6: "if(MALE,
                          log_regr(2.484557 + 0.2283921 * age, mult=2),
                          0)"
                - v7: "if(MALE,
                          exp(2.484557 + 0.2283921 * age + normal(0, 1) * 2),
                          0)"
                # max(normal) - min(normal) is commonly < 10
                - show('log(v6)', log(v6), '\n', 'log(v7)', log(v7), '\n',
                       'num values:', grpcount(v6 > 0), '\n',
                       'num problems:', grpcount(log(v6) - log(v7) > 20))
            
            test_uninitialized_var: not to_give_birth
            to_give_birth: if(not gender and (age >= 15) and (age <= 50),
                              logit_regr(0.0, align='al_p_birth.csv'),
                              False) 
            newbirth: if(to_give_birth,
                         if(age > 45,
                            new('person',
                                age=0,
                                partner_id=-1,
                                hh_id=hh_id,
                                m_id=id,
                                f_id=partner.id,
                                m_age=age, 
                                gender=choice([True, False], [0.51, 0.49])),  
                            new('person',
                                age=0,
                                partner_id=-1,
                                hh_id=hh_id,
                                m_id=id,
                                f_id=partner.id,
                                m_age=age,
                                young_mother=True, 
                                gender=logit_regr(0.0))),
                         -1)
            
            test_o2m:
                - nch: countlink(children)
                - nch_012: countlink(children, age <= 12)
                - ch_012_age_sum: sumlink(children, age, age <= 12)
                - ch_012_age2_sum: sumlink(children, age * 2, age <= 12)
                - ch_012_age_avg: avglink(children, age, age <= 12)
                - ch_minage: minlink(children, age)
                - ch_maxage: maxlink(children, age)
                - xx: show(dump(nch, nch_012, ch_012_age_sum, ch_012_age2_sum,
                                ch_012_age_avg, filter=(nch > 0) and (id < 100)))
            
            test_mixed_links:
                - show('mother vs step-mother:', mother.age, partner.mother.age)
                - show('other sex step-parent:',
                        where(gender, partner.mother.age, partner.father.age))
                - show('age vs age if married:', age, partner.partner.age)
                - show('mother.partner.age:', mother.partner.age, 
                       'father.age:', father.age)
                - show('hh.id:', household.id,
                       'hh.id+1:', household.get(id + 1),
                       'edu:', eduach,
                       'num persons:', household.get(countlink(persons)),
                       'num high edu:', household.get(countlink(persons, eduach == 4)))

            test_extra_comma:           
                - show('test extra colon'),
                 
            test_predictor1:
                predictor: plop
                expr: if(age < 10, age ** 3, age ** 2)
            test_predictor2:
                predictor: plop
                expr: if(age >= 10, 100, plop)

            test_predictor3:
                - a:
                    predictor: plop2
                    expr: if(age < 10, age ** 3, age ** 2)
                - b:
                    predictor: plop2
                    expr: if(age >= 50, 100, plop2)
                - show(plop2)
            
            test_clone:
                - clone(filter = age == 95,
                        f_id = id,
                        m_id = id,
                        nch = household.get(countlink(persons)))    
            
            marriage:
                - married: partner_id != -1

                - to_marry: (age >= 18) and (age <= 90) and not married

                - avg_age_men: grpavg(age, filter=to_marry and gender) 
                - difficult_match: if(to_marry and not gender,
                                       abs(age - avg_age_men),
                                       nan)

                - partner_id: 
                     if(to_marry, 
                         matching(set1filter=not gender,
                                  set2filter=gender,
                                  score='- 0.4893 * other.age 
                                         + 0.0131 * other.age ** 2 
                                         - 0.0001 * other.age ** 3
                                         + 0.0467 * (other.age - age) 
                                         - 0.0189 * (other.age - age) ** 2 
                                         + 0.0003 * (other.age - age) ** 3
                                         - 0.9087 * (other.work and not work) 
                                         - 1.3286 * (not other.work and work) 
                                         - 0.6549 * (other.work and work)
                                         - 0.7939 * ((other.eduach == 3) and (eduach == 4)) 
                                         - 1.4128 * ((other.eduach == 2) and (eduach == 4)) 
                                         - 0.8984 * ((other.eduach == 4) and (eduach == 3))
                                         - 1.5530 * ((other.eduach == 4) and (eduach == 2)) 
                                         - 0.5451 * ((other.eduach == 2) and (eduach == 2))',
                                  orderby=difficult_match),
                         partner_id)
                              
                - just_married: to_marry and (partner_id != -1)

                - newhousehold: new('household', filter=just_married and not gender,
                                    start_period=period)
                - hh_id: if(just_married,
                            if(gender, partner.newhousehold, newhousehold),
                            hh_id)

            test_compound:
                - show("min(age, 10):", min(age, 10)) 
                - show("max(age, 20):", max(age, 20))
                 
            test_lag:
                - lagavg: show(lag(grpavg(age)))
                - avglag: show(grpavg(lag(age)))
                - show("lag(age)", lag(age))
                - lagage_fill_zero: show(lag(age, missing=0))
                - shouldbenumbirth: show(grpcount(lag(age) == -1))
                - shouldbezero: show(grpcount(lag(age, missing=0) == -1))
                - num1yearold: show(grpcount(age == 1))
                - shouldbenumbirthand1yearold: show(grpcount(lag(age, missing=0) == 0))
                - show("age", age, 
                       "lag(age)", lag(age), 
                       "lag(age, 2)", lag(age, 2), 
                       "lag(lag(age))", lag(lag(age)))
                
            test_duration:
                - show("> 10", duration(age > 10))
                - show("max(d, 2)", max(duration(age > 10), 2))

            test_dump: 
#                - expr: csv(dump(gender, age, partner_id, partner.age),
#                             suffix='test')
#                - full: csv(dump())
                - test_show: show(dump(gender, age, filter=id < 10))

            cleanup: remove(lag(dead))
            
            test_o2m_aggregate: show(grpavg(countlink(children)))

            test_groupby:
                - test_logit: show(groupby(round(logit_score(0.0), 1)))
                - explicit_count: show(groupby(round(logit_score(0.0), 1), 
                                                expr=grpcount()))
                - num_persons2: show(groupby(agegroup, gender))
                - num_persons2_percent: show(groupby(agegroup, gender, percent=True))
                - num_persons_csv: csv(groupby(agegroup, gender), suffix='groupby')
                - num_persons3: show(groupby(agegroup, dead, gender))
                
                - ismarried: partner_id != -1
                - num_persons3t: show(groupby(agegroup, gender, ismarried))
                - num_alive: show(groupby(agegroup, gender,
                                           expr=grpcount(not dead)))
                - num_married: show(groupby(agegroup, gender,
                                             expr=grpcount(ismarried)))
                - num_widows: show(groupby(agegroup, gender, 
                                            expr=grpcount(partner.dead)))
                - bad_partners: if(partner_id != -1, id != partner.partner.id, nan)
                - num_bad_partner: show(groupby(agegroup, gender, 
                                                 expr=grpsum(if(partner_id != -1, 
                                                                id != partner.partner.id,
                                                                nan))))
                - agediff: show(groupby(agegroup, gender, 
                                         expr=grpavg(age - if(partner.age == -1, nan, partner.age))))
#                                        expr=grpavg(abs(age - if(partner.age == -1, nan, partner.age)))))
#                                        expr=grpsum(countlink(children)) / grpsum(not dead)))
#                                        expr=grpavg(nch)))
                - minmax_age: show(groupby(id / 100, gender, expr=grpmax(age) - grpmin(age)))


simulation:
    init:
        - person: [test_init]

    processes:
        - person: [#bp,
                   cleanup,
                   
                   temp_global,
                   show_temp_global,
                   temp_global_test1,
                   show_temp_global,
                   temp_global_test2,
                   show_temp_global,
                    
                   test_expr,
                   test_globals,
                   test_macro,
                   test_compound, 
                   agegroup,
                   test_align,
                   test_logit,
                   test_log_regr,

                   marriage,
                   
                   test_extra_comma,
                   
#                   test_uninitialized_var,
                   
                   to_give_birth, newbirth,
                   test_lag,
                   test_duration,
                   
                   test_o2m,
                   test_mixed_links,
                   test_clone,
                   
                   test_predictor1, test_predictor2, test_predictor3,

                   test_o2m_aggregate,
#                   test_groupby,
#                   test_dump,
        ]
        - household: [num_persons, nch, maxnch, 
#                      dump_csv_h
                     ]

    input:
        file: small.h5
    output:
        file: simulation.h5

#    random_seed: 0
    start_period: 2002   # first simulated period
    periods: 5